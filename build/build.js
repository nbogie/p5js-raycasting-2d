"use strict";
var Particle = (function () {
    function Particle(pos) {
        this.pos = pos.copy();
    }
    Particle.prototype.draw = function () {
        noStroke();
        fill("black");
        rectMode(CENTER);
        square(this.pos.x, this.pos.y, 3);
        fill(0, 20);
    };
    Particle.prototype.update = function () { };
    Particle.prototype.setPosition = function (pos) {
        this.pos.x = pos.x;
        this.pos.y = pos.y;
    };
    Particle.createRandom = function () {
        return new Particle(randomScreenPosition());
    };
    return Particle;
}());
var Ray = (function () {
    function Ray(origin, angleRads) {
        this.isDrawGhostRay = true;
        this.isDrawRayToFirstIntersection = true;
        this.isDrawIntersections = true;
        this.origin = origin.copy();
        this.dir = p5.Vector.fromAngle(angleRads);
        this.intersectionPoints = [];
        this.updateFarEnd();
        this.movementPhase = random(10000);
    }
    Ray.prototype.setPosition = function (pos) {
        this.origin.x = pos.x;
        this.origin.y = pos.y;
        this.updateFarEnd();
    };
    Ray.prototype.updateDirty = function (walls) {
        this.updateFarEnd();
        this.updateIntersections(walls);
    };
    Ray.prototype.lookAt = function (targetPos) {
        var deltaToTarget = targetPos.copy().sub(this.origin);
        var angleToTarget = atan2(deltaToTarget.y, deltaToTarget.x);
        this.dir = p5.Vector.fromAngle(angleToTarget);
        this.updateFarEnd();
    };
    Ray.createRandom = function () {
        return new Ray(randomScreenPosition(), random(0, TWO_PI));
    };
    Ray.prototype.intersectionWithWall = function (wall) {
        var answer = collideLineLine(wall.a.x, wall.a.y, wall.b.x, wall.b.y, this.origin.x, this.origin.y, this.farEnd.x, this.farEnd.y);
        if (answer) {
            return createVector(answer.x, answer.y);
        }
    };
    Ray.prototype.nearestIntersection = function () {
        var _this = this;
        if (this.intersectionPoints.length > 0) {
            return minBy(this.intersectionPoints, function (pt) { return -_this.origin.dist(pt); });
        }
        else {
            return undefined;
        }
    };
    Ray.prototype.calculateIntersections = function (walls) {
        var res = [];
        for (var _i = 0, walls_1 = walls; _i < walls_1.length; _i++) {
            var wall = walls_1[_i];
            var intersection = this.intersectionWithWall(wall);
            if (intersection) {
                res.push(intersection);
            }
        }
        return res;
    };
    Ray.prototype.updateIntersections = function (walls) {
        this.intersectionPoints = this.calculateIntersections(walls);
    };
    Ray.prototype.updateFarEnd = function () {
        this.farEnd = this.origin.copy().add(this.dir.copy().mult(width));
    };
    Ray.prototype.updateWithRoaming = function (walls, mousePos) {
        var offset = createVector(0, 0);
        offset.x = map(noise(this.movementPhase + 33333 + frameCount / 100), 0, 1, -1, 1);
        offset.y = map(noise(this.movementPhase + frameCount / 100), 0, 1, -1, 1);
        var newPos = this.origin.copy().add(offset);
        this.setPosition(newPos);
        this.lookAt(mousePos);
        this.updateDirty(walls);
    };
    Ray.prototype.drawRayUntilFirstIntersection = function () {
        var o = this.origin;
        var end = o.copy().add(this.dir.copy().mult(40));
        if (this.isDrawGhostRay) {
            stroke(255, 255, 255, 10);
            strokeWeight(0.3);
            line(o.x, o.y, this.farEnd.x, this.farEnd.y);
        }
        var nearPt = this.nearestIntersection();
        if (this.isDrawRayToFirstIntersection) {
            if (nearPt) {
                stroke("white");
                strokeWeight(2);
                line(o.x, o.y, nearPt.x, nearPt.y);
            }
        }
        if (this.isDrawIntersections) {
            for (var _i = 0, _a = this.intersectionPoints; _i < _a.length; _i++) {
                var iPt = _a[_i];
                fill("red");
                circle(iPt.x, iPt.y, 2);
            }
        }
    };
    Ray.prototype.drawAgentCanSeePlayer = function () {
        var o = this.origin;
        var end = o.copy().add(this.dir.copy().mult(40));
        var nearPt = this.nearestIntersection();
        noStroke();
        var distToMousePointer = this.origin.dist(mousePosAsVector());
        if (nearPt && this.origin.dist(nearPt) < distToMousePointer) {
            fill(0, 0, 0, 20);
            circle(o.x, o.y, 8);
        }
        else {
            var brightness_1 = map(distToMousePointer, 0, max(width, height), 255, 0);
            var litColor = color(255, 255, 255, brightness_1);
            fill(litColor);
            circle(o.x, o.y, 8);
        }
    };
    return Ray;
}());
var Structure = (function () {
    function Structure(center, radius, numSides) {
        this.center = center.copy();
        var vertices = [];
        for (var i = 0; i < numSides; i++) {
            var angle = (i * TWO_PI) / numSides;
            vertices.push(p5.Vector.fromAngle(angle)
                .mult(radius)
                .add(this.center));
        }
        var walls = [];
        for (var i = 0; i < numSides; i++) {
            var v1 = vertices[i];
            var v2 = i === numSides - 1 ? vertices[0] : vertices[i + 1];
            walls.push(new Wall(v1, v2));
        }
        this.walls = walls;
    }
    Structure.prototype.draw = function () {
        for (var _i = 0, _a = this.walls; _i < _a.length; _i++) {
            var wall = _a[_i];
            wall.draw();
        }
    };
    Structure.createRandom = function () {
        var center = randomScreenPosition();
        return new Structure(center, random(20, 200), random([3, 4, 5, 8]));
    };
    return Structure;
}());
function repeat(num, fn) {
    for (var i = 0; i < num; i++) {
        fn(i);
    }
}
function randomScreenPosition() {
    return createVector(random(width), random(height));
}
function randomInt(min, max) {
    return round(random(min, max));
}
function translateToVec(pos) {
    translate(pos.x, pos.y);
}
function centerPos() {
    return createVector(width / 2, height / 2);
}
function collideLineLine(x1, y1, x2, y2, x3, y3, x4, y4) {
    var intersection;
    var uA = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) /
        ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));
    var uB = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) /
        ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));
    if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {
        var intersectionX = x1 + uA * (x2 - x1);
        var intersectionY = y1 + uA * (y2 - y1);
        intersection = {
            x: intersectionX,
            y: intersectionY
        };
        return intersection;
    }
    return null;
}
function minBy(list, fn) {
    if (list.length < 0) {
        return null;
    }
    var recordItem = list[0];
    var recordWeight = fn(list[0]);
    for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
        var item = list_1[_i];
        var weight = fn(item);
        if (weight > recordWeight) {
            recordWeight = weight;
            recordItem = item;
        }
    }
    return recordItem;
}
var Wall = (function () {
    function Wall(a, b) {
        this.a = a.copy();
        this.b = b.copy();
    }
    Wall.prototype.draw = function () {
        stroke(243, 134, 48);
        strokeWeight(4);
        line(this.a.x, this.a.y, this.b.x, this.b.y);
        noStroke();
        fill("white");
        [this.a, this.b].forEach(function (pt) {
            circle(pt.x, pt.y, 3);
        });
    };
    Wall.prototype.length = function () {
        return dist(this.a.x, this.a.y, this.b.x, this.b.y);
    };
    Wall.createRandom = function () {
        var p1 = randomScreenPosition();
        var p2 = p1.copy().add(p5.Vector.random2D().mult(random(40, 400)));
        return new Wall(p1, p2);
    };
    return Wall;
}());
var isDebugging = false;
var gWalls = [];
var gAgentRays = [];
var gPlayerRays = [];
var gPlayer = null;
var gNumWalls = 20;
var gNumAgents = 100;
var gNumPlayerRays = 100;
var gNumStructures = 7;
var gStructures = [];
function setup() {
    createCanvas(windowWidth, windowHeight);
    repeat(gNumStructures, function () {
        var structure = Structure.createRandom();
        gStructures.push(structure);
        gWalls = gWalls.concat(structure.walls);
    });
    repeat(gNumWalls, function () {
        gWalls.push(Wall.createRandom());
    });
    repeat(gNumAgents, function () {
        gAgentRays.push(Ray.createRandom());
    });
    repeat(gNumPlayerRays, function (ix) {
        var angle = (ix * TWO_PI) / gNumPlayerRays;
        gPlayerRays.push(new Ray(mousePosAsVector(), angle));
    });
    gPlayer = Particle.createRandom();
}
function testCase() {
    var ray = new Ray(createVector(115, 870), createVector(-0.98, 0.18).heading());
    var wall = new Wall(createVector(37, 520), createVector(350, 440));
    ray.intersectionWithWall(wall);
}
function mousePosAsVector() {
    return createVector(mouseX, mouseY);
}
function update() {
    gPlayer.setPosition(mousePosAsVector());
    gPlayer.update();
    for (var _i = 0, gAgentRays_1 = gAgentRays; _i < gAgentRays_1.length; _i++) {
        var ray = gAgentRays_1[_i];
        ray.updateWithRoaming(gWalls, mousePosAsVector());
    }
    for (var _a = 0, gPlayerRays_1 = gPlayerRays; _a < gPlayerRays_1.length; _a++) {
        var ray = gPlayerRays_1[_a];
        ray.setPosition(mousePosAsVector());
        ray.updateIntersections(gWalls);
    }
}
function draw() {
    update();
    background(0);
    fill("black");
    noStroke();
    for (var _i = 0, gWalls_1 = gWalls; _i < gWalls_1.length; _i++) {
        var wall = gWalls_1[_i];
        wall.draw();
    }
    for (var _a = 0, gAgentRays_2 = gAgentRays; _a < gAgentRays_2.length; _a++) {
        var ray = gAgentRays_2[_a];
        ray.drawAgentCanSeePlayer();
    }
    for (var _b = 0, gPlayerRays_2 = gPlayerRays; _b < gPlayerRays_2.length; _b++) {
        var ray = gPlayerRays_2[_b];
        ray.drawRayUntilFirstIntersection();
    }
    gPlayer.draw();
}
//# sourceMappingURL=data:application/json;base64,