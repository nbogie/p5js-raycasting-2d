"use strict";
var Particle = (function () {
    function Particle(pos) {
        this.pos = pos.copy();
    }
    Particle.prototype.draw = function () {
        noStroke();
        fill("black");
        rectMode(CENTER);
        square(this.pos.x, this.pos.y, 3);
        fill(0, 20);
    };
    Particle.prototype.update = function () { };
    Particle.prototype.setPosition = function (pos) {
        this.pos.x = pos.x;
        this.pos.y = pos.y;
    };
    Particle.createRandom = function () {
        return new Particle(randomScreenPosition());
    };
    return Particle;
}());
var Ray = (function () {
    function Ray(origin, angleRads) {
        this.isDrawGhostRay = true;
        this.isDrawRayToFirstIntersection = false;
        this.isDrawIntersections = false;
        this.origin = origin.copy();
        this.dir = p5.Vector.fromAngle(angleRads);
        this.intersectionPoints = [];
        this.updateFarEnd();
        this.movementPhase = random(10000);
    }
    Ray.prototype.setPosition = function (pos) {
        this.origin.x = pos.x;
        this.origin.y = pos.y;
        this.updateFarEnd();
    };
    Ray.prototype.updateDirty = function (walls) {
        this.updateFarEnd();
        this.updateIntersections(walls);
    };
    Ray.prototype.lookAt = function (targetPos) {
        var deltaToTarget = targetPos.copy().sub(this.origin);
        var angleToTarget = atan2(deltaToTarget.y, deltaToTarget.x);
        this.dir = p5.Vector.fromAngle(angleToTarget);
        this.updateFarEnd();
    };
    Ray.createRandom = function () {
        return new Ray(randomScreenPosition(), random(0, TWO_PI));
    };
    Ray.prototype.intersectionWithWall = function (wall) {
        var answer = collideLineLine(wall.a.x, wall.a.y, wall.b.x, wall.b.y, this.origin.x, this.origin.y, this.farEnd.x, this.farEnd.y);
        if (answer) {
            return createVector(answer.x, answer.y);
        }
    };
    Ray.prototype.nearestIntersection = function () {
        var _this = this;
        if (this.intersectionPoints.length > 0) {
            return minBy(this.intersectionPoints, function (pt) { return -_this.origin.dist(pt); });
        }
        else {
            return undefined;
        }
    };
    Ray.prototype.calculateIntersections = function (walls) {
        var res = [];
        for (var _i = 0, walls_1 = walls; _i < walls_1.length; _i++) {
            var wall = walls_1[_i];
            var intersection = this.intersectionWithWall(wall);
            if (intersection) {
                res.push(intersection);
            }
        }
        return res;
    };
    Ray.prototype.updateIntersections = function (walls) {
        this.intersectionPoints = this.calculateIntersections(walls);
    };
    Ray.prototype.updateFarEnd = function () {
        this.farEnd = this.origin.copy().add(this.dir.copy().mult(width));
    };
    Ray.prototype.updateWithRoaming = function (walls, mousePos) {
        var offset = createVector(0, 0);
        offset.x = map(noise(this.movementPhase + 33333 + frameCount / 100), 0, 1, -1, 1);
        offset.y = map(noise(this.movementPhase + frameCount / 100), 0, 1, -1, 1);
        var newPos = this.origin.copy().add(offset);
        this.setPosition(newPos);
        this.lookAt(mousePos);
        this.updateDirty(walls);
    };
    Ray.prototype.draw = function () {
        var o = this.origin;
        var end = o.copy().add(this.dir.copy().mult(40));
        if (this.isDrawGhostRay) {
            stroke(255, 255, 255, 10);
            strokeWeight(0.3);
            line(o.x, o.y, this.farEnd.x, this.farEnd.y);
        }
        stroke("white");
        strokeWeight(4);
        var nearPt = this.nearestIntersection();
        if (this.isDrawRayToFirstIntersection) {
            if (nearPt) {
                stroke("white");
                strokeWeight(2);
                line(o.x, o.y, nearPt.x, nearPt.y);
            }
        }
        noStroke();
        var distToMousePointer = this.origin.dist(mousePosAsVector());
        if (nearPt && this.origin.dist(nearPt) < distToMousePointer) {
            fill(0, 0, 0, 20);
            circle(o.x, o.y, 15);
        }
        else {
            var brightness_1 = map(distToMousePointer, 0, max(width, height), 255, 0);
            var litColor = color(255, 255, 255, brightness_1);
            fill(litColor);
            circle(o.x, o.y, 15);
        }
        if (this.isDrawIntersections) {
            for (var _i = 0, _a = this.intersectionPoints; _i < _a.length; _i++) {
                var iPt = _a[_i];
                fill("red");
                circle(iPt.x, iPt.y, 2);
            }
        }
        textSize(8);
        text(this.dir.heading().toFixed(1), o.x + 10, o.y + 10);
    };
    return Ray;
}());
var Structure = (function () {
    function Structure(center, radius, numSides) {
        this.center = center.copy();
        var vertices = [];
        for (var i = 0; i < numSides; i++) {
            var angle = (i * TWO_PI) / numSides;
            vertices.push(p5.Vector.fromAngle(angle)
                .mult(radius)
                .add(this.center));
        }
        var walls = [];
        for (var i = 0; i < numSides; i++) {
            var v1 = vertices[i];
            var v2 = i === numSides - 1 ? vertices[0] : vertices[i + 1];
            walls.push(new Wall(v1, v2));
        }
        this.walls = walls;
    }
    Structure.prototype.draw = function () {
        for (var _i = 0, _a = this.walls; _i < _a.length; _i++) {
            var wall = _a[_i];
            wall.draw();
        }
    };
    Structure.createRandom = function () {
        var center = randomScreenPosition();
        return new Structure(center, random(20, 200), random([3, 4, 5, 8]));
    };
    return Structure;
}());
function repeat(num, fn) {
    for (var i = 0; i < num; i++) {
        fn(i);
    }
}
function randomScreenPosition() {
    return createVector(random(width), random(height));
}
function randomInt(min, max) {
    return round(random(min, max));
}
function translateToVec(pos) {
    translate(pos.x, pos.y);
}
function centerPos() {
    return createVector(width / 2, height / 2);
}
function collideLineLine(x1, y1, x2, y2, x3, y3, x4, y4) {
    var intersection;
    var uA = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) /
        ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));
    var uB = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) /
        ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));
    if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {
        var intersectionX = x1 + uA * (x2 - x1);
        var intersectionY = y1 + uA * (y2 - y1);
        intersection = {
            x: intersectionX,
            y: intersectionY
        };
        return intersection;
    }
    return null;
}
function minBy(list, fn) {
    if (list.length < 0) {
        return null;
    }
    var recordItem = list[0];
    var recordWeight = fn(list[0]);
    for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
        var item = list_1[_i];
        var weight = fn(item);
        if (weight > recordWeight) {
            recordWeight = weight;
            recordItem = item;
        }
    }
    return recordItem;
}
var Wall = (function () {
    function Wall(a, b) {
        this.a = a.copy();
        this.b = b.copy();
    }
    Wall.prototype.draw = function () {
        stroke("cadetblue");
        strokeWeight(4);
        line(this.a.x, this.a.y, this.b.x, this.b.y);
        noStroke();
        fill("white");
        [this.a, this.b].forEach(function (pt) {
            circle(pt.x, pt.y, 3);
        });
    };
    Wall.prototype.length = function () {
        return dist(this.a.x, this.a.y, this.b.x, this.b.y);
    };
    Wall.createRandom = function () {
        var p1 = randomScreenPosition();
        var p2 = p1.copy().add(p5.Vector.random2D().mult(random(40, 400)));
        return new Wall(p1, p2);
    };
    return Wall;
}());
var isDebugging = false;
var gWalls = [];
var gRays = [];
var gPlayer = null;
var gNumWalls = 20;
var gNumRays = 100;
var gNumStructures = 7;
var gStructures = [];
function setup() {
    createCanvas(windowWidth, windowHeight);
    repeat(gNumStructures, function () {
        var structure = Structure.createRandom();
        gStructures.push(structure);
        gWalls = gWalls.concat(structure.walls);
    });
    console.log(gWalls);
    repeat(gNumWalls, function () {
        gWalls.push(Wall.createRandom());
    });
    repeat(gNumRays, function () {
        gRays.push(Ray.createRandom());
    });
    gPlayer = Particle.createRandom();
}
function testCase() {
    var ray = new Ray(createVector(115, 870), createVector(-0.98, 0.18).heading());
    var wall = new Wall(createVector(37, 520), createVector(350, 440));
    ray.intersectionWithWall(wall);
}
function mousePosAsVector() {
    return createVector(mouseX, mouseY);
}
function update() {
    gPlayer.setPosition(mousePosAsVector());
    gPlayer.update();
    for (var _i = 0, gRays_1 = gRays; _i < gRays_1.length; _i++) {
        var ray = gRays_1[_i];
        ray.updateWithRoaming(gWalls, mousePosAsVector());
    }
}
function draw() {
    update();
    background(0);
    fill("black");
    noStroke();
    stroke("cadetblue");
    textSize(20);
    text("hello", width / 2, height / 2);
    for (var _i = 0, gWalls_1 = gWalls; _i < gWalls_1.length; _i++) {
        var wall = gWalls_1[_i];
        wall.draw();
    }
    for (var _a = 0, gRays_2 = gRays; _a < gRays_2.length; _a++) {
        var ray = gRays_2[_a];
        ray.draw();
    }
    gPlayer.draw();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQuanMiLCJzb3VyY2VSb290IjoiLi9qcy8iLCJzb3VyY2VzIjpbImluZGV4LnRzIiwiUGFydGljbGUudHMiLCJSYXkudHMiLCJTdHJ1Y3R1cmUudHMiLCJVdGlscy50cyIsIldhbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FDQWI7SUFHRSxrQkFBWSxHQUFjO1FBQ3hCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFDRCx1QkFBSSxHQUFKO1FBQ0UsUUFBUSxFQUFFLENBQUM7UUFDWCxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDZCxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDakIsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDZCxDQUFDO0lBQ0QseUJBQU0sR0FBTixjQUFVLENBQUM7SUFFWCw4QkFBVyxHQUFYLFVBQVksR0FBYztRQUN4QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ25CLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDckIsQ0FBQztJQUVNLHFCQUFZLEdBQW5CO1FBQ0UsT0FBTyxJQUFJLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUNILGVBQUM7QUFBRCxDQUFDLEFBdkJELElBdUJDO0FDdkJEO0lBYUUsYUFBWSxNQUFpQixFQUFFLFNBQWlCO1FBWmhELG1CQUFjLEdBQVksSUFBSSxDQUFDO1FBQy9CLGlDQUE0QixHQUFZLEtBQUssQ0FBQztRQUM5Qyx3QkFBbUIsR0FBWSxLQUFLLENBQUM7UUFXbkMsSUFB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QUFHLENBQUMsRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDN0MsQ0FBQztBQUdELFNBQVMsZUFBZSxDQUN0QixFQUFVLEVBQ1YsRUFBVSxFQUNWLEVBQVUsRUFDVixFQUFVLEVBQ1YsRUFBVSxFQUNWLEVBQVUsRUFDVixFQUFVLEVBQ1YsRUFBVTtJQUVWLElBQUksWUFBWSxDQUFDO0lBR2pCLElBQUksRUFBRSxHQUNKLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDL0MsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2xELElBQUksRUFBRSxHQUNKLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDL0MsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBR2xELElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRTtRQUU1QyxJQUFJLGFBQWEsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3hDLElB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QUksRUFBRSxDQUFDO0FBQ2pCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLy9wNS5kaXNhYmxlRnJpZW5kbHlFcnJvcnMgPSB0cnVlO1xuY29uc3QgaXNEZWJ1Z2dpbmcgPSBmYWxzZTtcbmxldCBnV2FsbHM6IFdhbGxbXSA9IFtdO1xubGV0IGdSYXlzOiBSYXlbXSA9IFtdO1xubGV0IGdQbGF5ZXI6IFBhcnRpY2xlID0gbnVsbDtcbmxldCBnTnVtV2FsbHM6IG51bWJlciA9IDIwO1xubGV0IGdOdW1SYXlzOiBudW1iZXIgPSAxMDA7XG5sZXQgZ051bVN0cnVjdHVyZXMgPSA3O1xuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBTRVRVUFxuICovXG5jb25zdCBnU3RydWN0dXJlczogU3RydWN0dXJlW10gPSBbXTtcbmZ1bmN0aW9uIHNldHVwKCkge1xuICBjcmVhdGVDYW52YXMod2luZG93V2lkdGgsIHdpbmRvd0hlaWdodCk7XG5cbiAgcmVwZWF0KGdOdW1TdHJ1Y3R1cmVzLCAoKSA9PiB7XG4gICAgY29uc3Qgc3RydWN0dXJlID0gU3RydWN0dXJlLmNyZWF0ZVJhbmRvbSgpO1xuICAgIGdTdHJ1Y3R1cmVzLnB1c2goc3RydWN0dXJlKTtcbiAgICBnV2FsbHMgPSBnV2FsbHMuY29uY2F0KHN0cnVjdHVyZS53YWxscyk7XG4gIH0pO1xuICBjb25zb2xlLmxvZyhnV2FsbHMpO1xuXG4gIHJlcGVhdChnTnVtV2FsbHMsICgpID0+IHtcbiAgICBnV2FsbHMucHVzaChXYWxsLmNyZWF0ZVJhbmRvbSgpKTtcbiAgfSk7XG4gIHJlcGVhdChnTnVtUmF5cywgKCkgPT4ge1xuICAgIGdSYXlzLnB1c2goUmF5LmNyZWF0ZVJhbmRvbSgpKTtcbiAgfSk7XG5cbiAgZ1BsYXllciA9IFBhcnRpY2xlLmNyZWF0ZVJhbmRvbSgpO1xufVxuXG5mdW5jdGlvbiB0ZXN0Q2FzZSgpIHtcbiAgY29uc3QgcmF5OiBSYXkgPSBuZXcgUmF5KFxuICAgIGNyZWF0ZVZlY3RvcigxMTUsIDg3MCksXG4gICAgY3JlYXRlVmVjdG9yKC0wLjk4LCAwLjE4KS5oZWFkaW5nKClcbiAgKTtcbiAgY29uc3Qgd2FsbCA9IG5ldyBXYWxsKGNyZWF0ZVZlY3RvcigzNywgNTIwKSwgY3JlYXRlVmVjdG9yKDM1MCwgNDQwKSk7XG4gIHJheS5pbnRlcnNlY3Rpb25XaXRoV2FsbCh3YWxsKTtcbn1cblxuZnVuY3Rpb24gbW91c2VQb3NBc1ZlY3RvcigpIHtcbiAgcmV0dXJuIGNyZWF0ZVZlY3Rvcihtb3VzZVgsIG1vdXNlWSk7XG59XG5mdW5jdGlvbiB1cGRhdGUoKSB7XG4gIGdQbGF5ZXIuc2V0UG9zaXRpb24obW91c2VQb3NBc1ZlY3RvcigpKTtcbiAgZ1BsYXllci51cGRhdGUoKTtcblxuICBmb3IgKGxldCByYXkgb2YgZ1JheXMpIHtcbiAgICByYXkudXBkYXRlV2l0aFJvYW1pbmcoZ1dhbGxzLCBtb3VzZVBvc0FzVmVjdG9yKCk7XG4gICAgLy9yYXkuc2V0UG9zaXRpb24obW91c2VQb3NBc1ZlY3RvcigpKTtcbiAgICAvL3JheS51cGRhdGVJbnRlcnNlY3Rpb25zKGdXYWxscyk7XG4gIH1cbn1cbi8qXG4gKiBEUkFXXG4gKi9cbmZ1bmN0aW9uIGRyYXcoKSB7XG4gIHVwZGF0ZSgpO1xuICBiYWNrZ3JvdW5kKDApO1xuICBmaWxsKFwiYmxhY2tcIik7XG4gIG5vU3Ryb2tlKCk7XG4gIHN0cm9rZShcImNhZGV0Ymx1ZVwiKTtcbiAgdGV4dFNpemUoMjApO1xuICB0ZXh0KFwiaGVsbG9cIiwgd2lkdGggLyAyLCBoZWlnaHQgLyAyKTtcblxuICBmb3IgKGxldCB3YWxsIG9mIGdXYWxscykge1xuICAgIHdhbGwuZHJhdygpO1xuICB9XG4gIGZvciAobGV0IHJheSBvZiBnUmF5cykge1xuICAgIHJheS5kcmF3KCk7XG4gIH1cbiAgZ1BsYXllci5kcmF3KCk7XG59XG4iLCJjbGFzcyBQYXJ0aWNsZSB7XG4gIHBvczogcDUuVmVjdG9yO1xuXG4gIGNvbnN0cnVjdG9yKHBvczogcDUuVmVjdG9yKSB7XG4gICAgdGhpcy5wb3MgPSBwb3MuY29weSgpO1xuICB9XG4gIGRyYXcoKSB7XG4gICAgbm9TdHJva2UoKTtcbiAgICBmaWxsKFwiYmxhY2tcIik7XG4gICAgcmVjdE1vZGUoQ0VOVEVSKTtcbiAgICBzcXVhcmUodGhpcy5wb3MueCwgdGhpcy5wb3MueSwgMyk7XG4gICAgZmlsbCgwLCAyMCk7XG4gIH1cbiAgdXBkYXRlKCkge31cblxuICBzZXRQb3NpdGlvbihwb3M6IHA1LlZlY3Rvcikge1xuICAgIHRoaXMucG9zLnggPSBwb3MueDtcbiAgICB0aGlzLnBvcy55ID0gcG9zLnk7XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlUmFuZG9tKCkge1xuICAgIHJldHVybiBuZXcgUGFydGljbGUocmFuZG9tU2NyZWVuUG9zaXRpb24oKSk7XG4gIH1cbn1cbiIsImNsYXNzIFJheSB7XG4gIGlzRHJhd0dob3N0UmF5OiBib29sZWFuID0gdHJ1ZTtcbiAgaXNEcmF3UmF5VG9GaXJzdEludGVyc2VjdGlvbjogYm9vbGVhbiA9IGZhbHNlO1xuICBpc0RyYXdJbnRlcnNlY3Rpb25zOiBib29sZWFuID0gZmFsc2U7XG4gIG9yaWdpbjogcDUuVmVjdG9yO1xuICBtb3ZlbWVudFBoYXNlOiBudW1iZXI7XG5cbiAgLy9yYXkgaXMgY29uY2VwdHVhbGx5IGluZmluaXRlIGxlbmd0aCB3aXRoIG9ubHkgb25lIGVuZCwgYnV0IHRoaXMgaGFjayBpcyB1c2VmdWwgZm9yIGludGVyc2VjdGlvbiBhbmQgcmVuZGVyaW5nLlxuICBmYXJFbmQ6IHA1LlZlY3RvcjsgLy9hIGhhY2suICBvZmZzY3JlZW4gXCJmYXIgZW5kXCIuXG5cbiAgZGlyOiBwNS5WZWN0b3I7XG4gIGludGVyc2VjdGlvblBvaW50czogcDUuVmVjdG9yW107XG5cbiAgY29uc3RydWN0b3Iob3JpZ2luOiBwNS5WZWN0b3IsIGFuZ2xlUmFkczogbnVtYmVyKSB7XG4gICAgdGhpcy5vcmlnaW4gPSBvcmlnaW4uY29weSgpO1xuICAgIHRoaXMuZGlyID0gcDUuVmVjdG9yLmZyb21BbmdsZShhbmdsZVJhZHMpO1xuICAgIHRoaXMuaW50ZXJzZWN0aW9uUG9pbnRzID0gW107XG4gICAgdGhpcy51cGRhdGVGYXJFbmQoKTtcbiAgICB0aGlzLm1vdmVtZW50UGhhc2UgPSByYW5kb20oMTAwMDApO1xuICB9XG5cbiAgc2V0UG9zaXRpb24ocG9zOiBwNS5WZWN0b3IpIHtcbiAgICB0aGlzLm9yaWdpbi54ID0gcG9zLng7XG4gICAgdGhpcy5vcmlnaW4ueSA9IHBvcy55O1xuICAgIHRoaXMudXBkYXRlRmFyRW5kKCk7XG4gIH1cblxuICB1cGRhdGVEaXJ0eSh3YWxsczogV2FsbFtdKSB7XG4gICAgdGhpcy51cGRhdGVGYXJFbmQoKTtcbiAgICB0aGlzLnVwZGF0ZUludGVyc2VjdGlvbnMod2FsbHMpO1xuICB9XG4gIGxvb2tBdCh0YXJnZXRQb3M6IHA1LlZlY3Rvcikge1xuICAgIGNvbnN0IGRlbHRhVG9UYXJnZXQgPSB0YXJnZXRQb3MuY29weSgpLnN1Yih0aGlzLm9yaWdpbik7XG4gICAgLy9ub3RlOiBwYXJhbSBvcmRlcjogeSB0aGVuIHhcbiAgICBjb25zdCBhbmdsZVRvVGFyZ2V0ID0gYXRhbjIoZGVsdGFUb1RhcmdldC55LCBkZWx0YVRvVGFyZ2V0LngpO1xuICAgIHRoaXMuZGlyID0gcDUuVmVjdG9yLmZyb21BbmdsZShhbmdsZVRvVGFyZ2V0KTtcbiAgICB0aGlzLnVwZGF0ZUZhckVuZCgpO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZVJhbmRvbSgpIHtcbiAgICByZXR1cm4gbmV3IFJheShyYW5kb21TY3JlZW5Qb3NpdGlvbigpLCByYW5kb20oMCwgVFdPX1BJKSk7XG4gIH1cbiAgaW50ZXJzZWN0aW9uV2l0aFdhbGwod2FsbDogV2FsbCk6IHA1LlZlY3RvciB7XG4gICAgY29uc3QgYW5zd2VyID0gY29sbGlkZUxpbmVMaW5lKFxuICAgICAgd2FsbC5hLngsXG4gICAgICB3YWxsLmEueSxcbiAgICAgIHdhbGwuYi54LFxuICAgICAgd2FsbC5iLnksXG4gICAgICB0aGlzLm9yaWdpbi54LFxuICAgICAgdGhpcy5vcmlnaW4ueSxcbiAgICAgIHRoaXMuZmFyRW5kLngsXG4gICAgICB0aGlzLmZhckVuZC55XG4gICAgKTtcblxuICAgIGlmIChhbnN3ZXIpIHtcbiAgICAgIHJldHVybiBjcmVhdGVWZWN0b3IoYW5zd2VyLngsIGFuc3dlci55KTtcbiAgICB9XG4gIH1cblxuICBuZWFyZXN0SW50ZXJzZWN0aW9uKCk6IHA1LlZlY3RvciB7XG4gICAgaWYgKHRoaXMuaW50ZXJzZWN0aW9uUG9pbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBtaW5CeShcbiAgICAgICAgdGhpcy5pbnRlcnNlY3Rpb25Qb2ludHMsXG4gICAgICAgIChwdDogcDUuVmVjdG9yKSA9PiAtdGhpcy5vcmlnaW4uZGlzdChwdClcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG4gIGNhbGN1bGF0ZUludGVyc2VjdGlvbnMod2FsbHM6IFdhbGxbXSk6IHA1LlZlY3RvcltdIHtcbiAgICBjb25zdCByZXM6IHA1LlZlY3RvcltdID0gW107XG4gICAgZm9yIChsZXQgd2FsbCBvZiB3YWxscykge1xuICAgICAgY29uc3QgaW50ZXJzZWN0aW9uID0gdGhpcy5pbnRlcnNlY3Rpb25XaXRoV2FsbCh3YWxsKTtcbiAgICAgIGlmIChpbnRlcnNlY3Rpb24pIHtcbiAgICAgICAgcmVzLnB1c2goaW50ZXJzZWN0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuICB1cGRhdGVJbnRlcnNlY3Rpb25zKHdhbGxzOiBXYWxsW10pIHtcbiAgICB0aGlzLmludGVyc2VjdGlvblBvaW50cyA9IHRoaXMuY2FsY3VsYXRlSW50ZXJzZWN0aW9ucyh3YWxscyk7XG4gIH1cblxuICB1cGRhdGVGYXJFbmQoKTogdm9pZCB7XG4gICAgdGhpcy5mYXJFbmQgPSB0aGlzLm9yaWdpbi5jb3B5KCkuYWRkKHRoaXMuZGlyLmNvcHkoKS5tdWx0KHdpZHRoKSk7XG4gIH1cblxuICB1cGRhdGVXaXRoUm9hbWluZyh3YWxsczogV2FsbFtdLCBtb3VzZVBvczogcDUuVmVjdG9yKTogdm9pZCB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gY3JlYXRlVmVjdG9yKDAsIDApO1xuICAgIG9mZnNldC54ID0gbWFwKFxuICAgICAgbm9pc2UodGhpcy5tb3ZlbWVudFBoYXNlICsgMzMzMzMgKyBmcmFtZUNvdW50IC8gMTAwKSxcbiAgICAgIDAsXG4gICAgICAxLFxuICAgICAgLTEsXG4gICAgICAxXG4gICAgKTtcbiAgICBvZmZzZXQueSA9IG1hcChub2lzZSh0aGlzLm1vdmVtZW50UGhhc2UgKyBmcmFtZUNvdW50IC8gMTAwKSwgMCwgMSwgLTEsIDEpO1xuICAgIGNvbnN0IG5ld1BvcyA9IHRoaXMub3JpZ2luLmNvcHkoKS5hZGQob2Zmc2V0KTtcbiAgICB0aGlzLnNldFBvc2l0aW9uKG5ld1Bvcyk7XG4gICAgdGhpcy5sb29rQXQobW91c2VQb3MpO1xuICAgIHRoaXMudXBkYXRlRGlydHkod2FsbHMpO1xuICB9XG5cbiAgZHJhdygpIHtcbiAgICBjb25zdCBvID0gdGhpcy5vcmlnaW47XG4gICAgY29uc3QgZW5kID0gby5jb3B5KCkuYWRkKHRoaXMuZGlyLmNvcHkoKS5tdWx0KDQwKSk7XG5cbiAgICAvL2RyYXcgdG8gZmFyIChvZmYtc2NyZWVuKSBlbmRcbiAgICBpZiAodGhpcy5pc0RyYXdHaG9zdFJheSkge1xuICAgICAgc3Ryb2tlKDI1NSwgMjU1LCAyNTUsIDEwKTtcbiAgICAgIHN0cm9rZVdlaWdodCgwLjMpO1xuICAgICAgbGluZShvLngsIG8ueSwgdGhpcy5mYXJFbmQueCwgdGhpcy5mYXJFbmQueSk7XG4gICAgfVxuICAgIC8vZHJhdyBzaG9ydCByYXlcbiAgICBzdHJva2UoXCJ3aGl0ZVwiKTtcbiAgICBzdHJva2VXZWlnaHQoNCk7XG4gICAgLy8gICAgbGluZShvLngsIG8ueSwgZW5kLngsIGVuZC55KTtcblxuICAgIGNvbnN0IG5lYXJQdCA9IHRoaXMubmVhcmVzdEludGVyc2VjdGlvbigpO1xuICAgIGlmICh0aGlzLmlzRHJhd1JheVRvRmlyc3RJbnRlcnNlY3Rpb24pIHtcbiAgICAgIGlmIChuZWFyUHQpIHtcbiAgICAgICAgc3Ryb2tlKFwid2hpdGVcIik7XG4gICAgICAgIHN0cm9rZVdlaWdodCgyKTtcbiAgICAgICAgbGluZShvLngsIG8ueSwgbmVhclB0LngsIG5lYXJQdC55KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvL2RyYXcgc3RhcnQgcG9pbnRcbiAgICBub1N0cm9rZSgpO1xuICAgIGNvbnN0IGRpc3RUb01vdXNlUG9pbnRlciA9IHRoaXMub3JpZ2luLmRpc3QobW91c2VQb3NBc1ZlY3RvcigpKTtcbiAgICBpZiAobmVhclB0ICYmIHRoaXMub3JpZ2luLmRpc3QobmVhclB0KSA8IGRpc3RUb01vdXNlUG9pbnRlcikge1xuICAgICAgZmlsbCgwLCAwLCAwLCAyMCk7XG4gICAgICBjaXJjbGUoby54LCBvLnksIDE1KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgYnJpZ2h0bmVzcyA9IG1hcChkaXN0VG9Nb3VzZVBvaW50ZXIsIDAsIG1heCh3aWR0aCwgaGVpZ2h0KSwgMjU1LCAwKTtcbiAgICAgIGNvbnN0IGxpdENvbG9yOiBwNS5Db2xvciA9IGNvbG9yKDI1NSwgMjU1LCAyNTUsIGJyaWdodG5lc3MpO1xuICAgICAgZmlsbChsaXRDb2xvcik7XG4gICAgICBjaXJjbGUoby54LCBvLnksIDE1KTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaXNEcmF3SW50ZXJzZWN0aW9ucykge1xuICAgICAgZm9yIChsZXQgaVB0IG9mIHRoaXMuaW50ZXJzZWN0aW9uUG9pbnRzKSB7XG4gICAgICAgIGZpbGwoXCJyZWRcIik7XG4gICAgICAgIGNpcmNsZShpUHQueCwgaVB0LnksIDIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRleHRTaXplKDgpO1xuICAgIHRleHQodGhpcy5kaXIuaGVhZGluZygpLnRvRml4ZWQoMSksIG8ueCArIDEwLCBvLnkgKyAxMCk7XG4gIH1cbn1cbiIsImNsYXNzIFN0cnVjdHVyZSB7XG4gIGNlbnRlcjogcDUuVmVjdG9yO1xuICB3YWxsczogV2FsbFtdO1xuXG4gIGNvbnN0cnVjdG9yKGNlbnRlcjogcDUuVmVjdG9yLCByYWRpdXM6IG51bWJlciwgbnVtU2lkZXM6IG51bWJlcikge1xuICAgIHRoaXMuY2VudGVyID0gY2VudGVyLmNvcHkoKTtcblxuICAgIGNvbnN0IHZlcnRpY2VzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1TaWRlczsgaSsrKSB7XG4gICAgICBjb25zdCBhbmdsZSA9IChpICogVFdPX1BJKSAvIG51bVNpZGVzO1xuICAgICAgdmVydGljZXMucHVzaChcbiAgICAgICAgcDUuVmVjdG9yLmZyb21BbmdsZShhbmdsZSlcbiAgICAgICAgICAubXVsdChyYWRpdXMpXG4gICAgICAgICAgLmFkZCh0aGlzLmNlbnRlcilcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IHdhbGxzOiBXYWxsW10gPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVNpZGVzOyBpKyspIHtcbiAgICAgIGNvbnN0IHYxID0gdmVydGljZXNbaV07XG4gICAgICBjb25zdCB2MiA9IGkgPT09IG51bVNpZGVzIC0gMSA/IHZlcnRpY2VzWzBdIDogdmVydGljZXNbaSArIDFdO1xuICAgICAgd2FsbHMucHVzaChuZXcgV2FsbCh2MSwgdjIpKTtcbiAgICB9XG5cbiAgICB0aGlzLndhbGxzID0gd2FsbHM7XG4gIH1cblxuICBkcmF3KCkge1xuICAgIGZvciAobGV0IHdhbGwgb2YgdGhpcy53YWxscykge1xuICAgICAgd2FsbC5kcmF3KCk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGNyZWF0ZVJhbmRvbSgpIHtcbiAgICBjb25zdCBjZW50ZXIgPSByYW5kb21TY3JlZW5Qb3NpdGlvbigpO1xuICAgIHJldHVybiBuZXcgU3RydWN0dXJlKGNlbnRlciwgcmFuZG9tKDIwLCAyMDApLCByYW5kb20oWzMsIDQsIDUsIDhdKSk7XG4gIH1cbn1cbiIsImZ1bmN0aW9uIHJlcGVhdChudW06IG51bWJlciwgZm46IChpeDogbnVtYmVyKSA9PiB2b2lkKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtOyBpKyspIHtcbiAgICBmbihpKTtcbiAgfVxufVxuZnVuY3Rpb24gcmFuZG9tU2NyZWVuUG9zaXRpb24oKTogcDUuVmVjdG9yIHtcbiAgcmV0dXJuIGNyZWF0ZVZlY3RvcihyYW5kb20od2lkdGgpLCByYW5kb20oaGVpZ2h0KSk7XG59XG5cbmZ1bmN0aW9uIHJhbmRvbUludChtaW46IG51bWJlciwgbWF4OiBudW1iZXIpOiBudW1iZXIge1xuICByZXR1cm4gcm91bmQocmFuZG9tKG1pbiwgbWF4KSk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVRvVmVjKHBvczogcDUuVmVjdG9yKTogdm9pZCB7XG4gIHRyYW5zbGF0ZShwb3MueCwgcG9zLnkpO1xufVxuXG5mdW5jdGlvbiBjZW50ZXJQb3MoKTogcDUuVmVjdG9yIHtcbiAgcmV0dXJuIGNyZWF0ZVZlY3Rvcih3aWR0aCAvIDIsIGhlaWdodCAvIDIpO1xufVxuXG4vL1Rha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2Jtb3Jlbi9wNS5jb2xsaWRlMkRcbmZ1bmN0aW9uIGNvbGxpZGVMaW5lTGluZShcbiAgeDE6IG51bWJlcixcbiAgeTE6IG51bWJlcixcbiAgeDI6IG51bWJlcixcbiAgeTI6IG51bWJlcixcbiAgeDM6IG51bWJlcixcbiAgeTM6IG51bWJlcixcbiAgeDQ6IG51bWJlcixcbiAgeTQ6IG51bWJlclxuKSB7XG4gIGxldCBpbnRlcnNlY3Rpb247XG5cbiAgLy8gY2FsY3VsYXRlIHRoZSBkaXN0YW5jZSB0byBpbnRlcnNlY3Rpb24gcG9pbnRcbiAgbGV0IHVBID1cbiAgICAoKHg0IC0geDMpICogKHkxIC0geTMpIC0gKHk0IC0geTMpICogKHgxIC0geDMpKSAvXG4gICAgKCh5NCAtIHkzKSAqICh4MiAtIHgxKSAtICh4NCAtIHgzKSAqICh5MiAtIHkxKSk7XG4gIGxldCB1QiA9XG4gICAgKCh4MiAtIHgxKSAqICh5MSAtIHkzKSAtICh5MiAtIHkxKSAqICh4MSAtIHgzKSkgL1xuICAgICgoeTQgLSB5MykgKiAoeDIgLSB4MSkgLSAoeDQgLSB4MykgKiAoeTIgLSB5MSkpO1xuXG4gIC8vIGlmIHVBIGFuZCB1QiBhcmUgYmV0d2VlbiAwLTEsIGxpbmVzIGFyZSBjb2xsaWRpbmdcbiAgaWYgKHVBID49IDAgJiYgdUEgPD0gMSAmJiB1QiA+PSAwICYmIHVCIDw9IDEpIHtcbiAgICAvLyBjYWxjIHRoZSBwb2ludCB3aGVyZSB0aGUgbGluZXMgbWVldFxuICAgIGxldCBpbnRlcnNlY3Rpb25YID0geDEgKyB1QSAqICh4MiAtIHgxKTtcbiAgICBsZXQgaW50ZXJzZWN0aW9uWSA9IHkxICsgdUEgKiAoeTIgLSB5MSk7XG5cbiAgICBpbnRlcnNlY3Rpb24gPSB7XG4gICAgICB4OiBpbnRlcnNlY3Rpb25YLFxuICAgICAgeTogaW50ZXJzZWN0aW9uWVxuICAgIH07XG4gICAgcmV0dXJuIGludGVyc2VjdGlvbjtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gbWluQnk8VD4obGlzdDogVFtdLCBmbjogKGl0ZW06IFQpID0+IG51bWJlcik6IFQge1xuICBpZiAobGlzdC5sZW5ndGggPCAwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgbGV0IHJlY29yZEl0ZW0gPSBsaXN0WzBdO1xuICBsZXQgcmVjb3JkV2VpZ2h0ID0gZm4obGlzdFswXSk7XG4gIGZvciAobGV0IGl0ZW0gb2YgbGlzdCkge1xuICAgIGNvbnN0IHdlaWdodCA9IGZuKGl0ZW0pO1xuICAgIGlmICh3ZWlnaHQgPiByZWNvcmRXZWlnaHQpIHtcbiAgICAgIHJlY29yZFdlaWdodCA9IHdlaWdodDtcbiAgICAgIHJlY29yZEl0ZW0gPSBpdGVtO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVjb3JkSXRlbTtcbn1cbiIsImNsYXNzIFdhbGwge1xuICBhOiBwNS5WZWN0b3I7XG4gIGI6IHA1LlZlY3RvcjtcblxuICBjb25zdHJ1Y3RvcihhOiBwNS5WZWN0b3IsIGI6IHA1LlZlY3Rvcikge1xuICAgIHRoaXMuYSA9IGEuY29weSgpO1xuICAgIHRoaXMuYiA9IGIuY29weSgpO1xuICB9XG4gIGRyYXcoKSB7XG4gICAgc3Ryb2tlKFwiY2FkZXRibHVlXCIpO1xuICAgIHN0cm9rZVdlaWdodCg0KTtcbiAgICBsaW5lKHRoaXMuYS54LCB0aGlzLmEueSwgdGhpcy5iLngsIHRoaXMuYi55KTtcblxuICAgIG5vU3Ryb2tlKCk7XG4gICAgZmlsbChcIndoaXRlXCIpO1xuICAgIFt0aGlzLmEsIHRoaXMuYl0uZm9yRWFjaChwdCA9PiB7XG4gICAgICBjaXJjbGUocHQueCwgcHQueSwgMyk7XG4gICAgfSk7XG4gIH1cbiAgbGVuZ3RoKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIGRpc3QodGhpcy5hLngsIHRoaXMuYS55LCB0aGlzLmIueCwgdGhpcy5iLnkpO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZVJhbmRvbSgpIHtcbiAgICBjb25zdCBwMSA9IHJhbmRvbVNjcmVlblBvc2l0aW9uKCk7XG4gICAgY29uc3QgcDIgPSBwMS5jb3B5KCkuYWRkKHA1LlZlY3Rvci5yYW5kb20yRCgpLm11bHQocmFuZG9tKDQwLCA0MDApKSk7XG4gICAgcmV0dXJuIG5ldyBXYWxsKHAxLCBwMik7XG4gIH1cbn1cbiJdfQ==