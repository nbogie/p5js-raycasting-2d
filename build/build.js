"use strict";
var Agent = (function () {
    function Agent(pos) {
        this.pos = pos.copy();
        this.movementPhase = random(10000);
        this.speed = 1;
        this.ray = new Ray(this.pos, { target: mousePosAsVector() });
    }
    Agent.prototype.draw = function () {
        noStroke();
        fill("black");
        rectMode(CENTER);
        square(this.pos.x, this.pos.y, 3);
        fill(0, 20);
        this.drawAgentCanSeePosition(mousePosAsVector());
    };
    Agent.prototype.drawAgentCanSeePosition = function (targetPos) {
        var o = this.pos;
        noStroke();
        if (this.ray.canSeePoint(targetPos)) {
            fill(0, 0, 0, 20);
            circle(o.x, o.y, 8);
        }
        else {
            var distToTarget = this.pos.dist(targetPos);
            var brightness_1 = map(distToTarget, 0, max(width, height), 255, 0);
            var litColor = color(255, 255, 255, brightness_1);
            fill(litColor);
            circle(o.x, o.y, 8);
        }
    };
    Agent.prototype.setPosition = function (pos) {
        this.pos.x = pos.x;
        this.pos.y = pos.y;
    };
    Agent.createRandom = function () {
        return new Agent(randomScreenPosition());
    };
    Agent.prototype.updateWithRoaming = function (walls, targetPos) {
        var newPos = null;
        var offset = createVector(0, 0);
        offset.x = map(noise(this.movementPhase + 33333 + frameCount / 100), 0, 1, -1, 1);
        offset.y = map(noise(this.movementPhase + frameCount / 100), 0, 1, -1, 1);
        var attractVec = this.pos
            .copy()
            .sub(targetPos)
            .normalize();
        newPos = this.pos.copy().add(attractVec.mult(this.speed));
        newPos.add(offset);
        this.setPosition(newPos);
        this.ray = new Ray(this.pos, { target: targetPos });
        this.ray.recalculateIntersections(walls);
        var newSpeed = this.speed + (this.ray.canSeePoint(targetPos) ? -0.1 : 0.1);
        if (Math.abs(newSpeed) < 3) {
            this.speed = newSpeed;
        }
    };
    return Agent;
}());
var Particle = (function () {
    function Particle(pos) {
        this.pos = pos.copy();
    }
    Particle.prototype.draw = function () {
        noStroke();
        fill("black");
        rectMode(CENTER);
        square(this.pos.x, this.pos.y, 3);
        fill(0, 20);
    };
    Particle.prototype.update = function () { };
    Particle.prototype.setPosition = function (pos) {
        this.pos.x = pos.x;
        this.pos.y = pos.y;
    };
    Particle.createRandom = function () {
        return new Particle(randomScreenPosition());
    };
    return Particle;
}());
var Ray = (function () {
    function Ray(origin, _a) {
        var _b = _a.angleRads, angleRads = _b === void 0 ? null : _b, _c = _a.target, target = _c === void 0 ? null : _c, _d = _a.walls, walls = _d === void 0 ? [] : _d;
        this.origin = origin.copy();
        if (target !== null) {
            this.lookAt(target);
        }
        else {
            this.angleRads = p5.Vector.fromAngle(angleRads);
        }
        this.intersectionPoints = [];
        this.recalculateFarEnd();
        if (walls.length > 0) {
            this.recalculateIntersections(walls);
        }
    }
    Ray.prototype.lookAt = function (targetPos) {
        var deltaToTarget = targetPos.copy().sub(this.origin);
        var angleToTarget = atan2(deltaToTarget.y, deltaToTarget.x);
        this.angleRads = p5.Vector.fromAngle(angleToTarget);
        this.recalculateFarEnd();
    };
    Ray.createRandom = function () {
        return new Ray(randomScreenPosition(), { angleRads: random(0, TWO_PI) });
    };
    Ray.prototype.intersectionWithWall = function (wall) {
        var answer = collideLineLine(wall.a.x, wall.a.y, wall.b.x, wall.b.y, this.origin.x, this.origin.y, this.farEnd.x, this.farEnd.y);
        return answer;
    };
    Ray.prototype.nearestIntersection = function () {
        var _this = this;
        if (this.intersectionPoints.length > 0) {
            return minBy(this.intersectionPoints, function (pt) { return -_this.origin.dist(pt); });
        }
        else {
            return undefined;
        }
    };
    Ray.prototype.calculateIntersections = function (walls) {
        var res = [];
        for (var _i = 0, walls_1 = walls; _i < walls_1.length; _i++) {
            var wall = walls_1[_i];
            var intersection = this.intersectionWithWall(wall);
            if (intersection) {
                res.push(intersection);
            }
        }
        return res;
    };
    Ray.prototype.recalculateIntersections = function (walls) {
        this.intersectionPoints = this.calculateIntersections(walls);
    };
    Ray.prototype.recalculateFarEnd = function () {
        this.farEnd = this.origin.copy().add(this.angleRads.copy().mult(width));
    };
    Ray.prototype.drawLitLineSegment = function (a, b) {
        if (Ray.isRenderAsCobweb) {
            for (var i = 0; i < 20; i++) {
                var pt = a.copy().lerp(b, i / 10);
                square(pt.x, pt.y, 1);
            }
        }
        else {
            line(a.x, a.y, b.x, b.y);
        }
    };
    Ray.prototype.drawRayUntilFirstIntersection = function () {
        var o = this.origin;
        var end = o.copy().add(this.angleRads.copy().mult(40));
        if (Ray.isDrawGhostRay) {
            stroke(255, 255, 255, 10);
            strokeWeight(0.3);
            line(o.x, o.y, this.farEnd.x, this.farEnd.y);
        }
        var nearPt = this.nearestIntersection();
        if (Ray.isDrawRayToFirstIntersection) {
            if (nearPt) {
                stroke("white");
                strokeWeight(2);
                this.drawLitLineSegment(o, nearPt);
            }
        }
        if (Ray.isDrawIntersections) {
            for (var _i = 0, _a = this.intersectionPoints; _i < _a.length; _i++) {
                var iPt = _a[_i];
                fill("gray");
                circle(iPt.x, iPt.y, 2);
            }
            var first = this.nearestIntersection();
            if (first) {
                fill("white");
                circle(first.x, first.y, 2);
            }
        }
    };
    Ray.prototype.canSeePoint = function (target) {
        var nearestIsect = this.nearestIntersection();
        var distToTarget = this.origin.dist(target);
        return nearestIsect && this.origin.dist(nearestIsect) < distToTarget;
    };
    Ray.isRenderAsCobweb = false;
    Ray.isDrawGhostRay = true;
    Ray.isDrawRayToFirstIntersection = true;
    Ray.isDrawIntersections = false;
    return Ray;
}());
var Structure = (function () {
    function Structure(center, radius, numSides) {
        this.isFilledShape = false;
        this.rotation = random(TWO_PI);
        this.myColor = this.randomColor();
        this.movementSpeed = -random(0.2, 2);
        this.rotationSpeed = random(-0.01, 0.01);
        this.abstractVertices = this.createVerticesForShapeWithNumSides(center, radius, numSides);
        this.walls = this.makeWallsFromVertices(this.abstractVertices, this.myColor);
    }
    Structure.prototype.randomColor = function () {
        return random([
            color(250, 105, 0),
            color(105, 210, 231),
            color(167, 219, 216),
            color(243, 134, 48)
        ]);
    };
    Structure.prototype.createVerticesForShapeWithNumSides = function (center, radius, numSides) {
        var vertices = [];
        if (numSides === 1) {
            var _a = this.createRandomLineSeg(), a = _a[0], b = _a[1];
            vertices.push(a);
            vertices.push(b);
            this.center = a.copy().lerp(b, 0.5);
        }
        else {
            this.center = center.copy();
            for (var i = 0; i < numSides; i++) {
                var angle = (i * TWO_PI) / numSides;
                vertices.push(p5.Vector.fromAngle(angle)
                    .mult(radius)
                    .add(this.center));
            }
        }
        return vertices;
    };
    Structure.prototype.makeWallsFromVertices = function (vs, myColor) {
        var walls = [];
        if (vs.length === 2) {
            var singleWall = new Wall(vs[0], vs[1]);
            singleWall.myColor = myColor;
            walls.push(singleWall);
        }
        else {
            var numSides = vs.length;
            for (var i = 0; i < numSides; i++) {
                var a = vs[i];
                var b = i === numSides - 1 ? vs[0] : vs[i + 1];
                var wall = new Wall(a, b);
                wall.myColor = myColor;
                walls.push(wall);
            }
        }
        return walls;
    };
    Structure.prototype.createRandomLineSeg = function () {
        var p1 = randomScreenPosition();
        var p2 = p1.copy().add(p5.Vector.random2D().mult(random(40, 400)));
        return [p1, p2];
    };
    Structure.prototype.rotate = function (angleRad) {
        var _this = this;
        this.rotation += angleRad;
        var rotatedVertices = this.abstractVertices.map(function (v) {
            return rotateVertexAround(v, _this.center, _this.rotation);
        });
        this.walls = this.makeWallsFromVertices(rotatedVertices, this.myColor);
    };
    Structure.prototype.update = function () {
        var moveAmt = this.movementSpeed;
        if (this.center.x + moveAmt < 0) {
            moveAmt += width;
        }
        this.center.x += moveAmt;
        this.walls = this.makeWallsFromVertices(this.abstractVertices.map(function (v) { return v.add(createVector(moveAmt, 0)); }), this.myColor);
        this.rotate(this.rotationSpeed);
    };
    Structure.prototype.draw = function () {
        for (var _i = 0, _a = this.walls; _i < _a.length; _i++) {
            var wall = _a[_i];
            wall.draw();
        }
        circle(this.center.x, this.center.y, 5);
        if (this.isFilledShape) {
            beginShape();
            for (var _b = 0, _c = this.walls; _b < _c.length; _b++) {
                var wall = _c[_b];
                for (var _d = 0, _e = [wall.a, wall.b]; _d < _e.length; _d++) {
                    var pt = _e[_d];
                    vertex(pt.x, pt.y);
                }
            }
            endShape(CLOSE);
        }
    };
    Structure.createRandom = function () {
        var center = randomScreenPosition();
        var numSides = random([1, 1, 1, 3, 4, 5, 8]);
        return new Structure(center, random(20, random(100, 200)), numSides);
    };
    return Structure;
}());
function repeat(num, fn) {
    for (var i = 0; i < num; i++) {
        fn(i);
    }
}
function randomScreenPosition() {
    return createVector(random(width), random(height));
}
function randomInt(min, max) {
    return round(random(min, max));
}
function translateToVec(pos) {
    translate(pos.x, pos.y);
}
function centerPos() {
    return createVector(width / 2, height / 2);
}
function rotateVertexAround(vertex, rotOrigin, angleRad) {
    return vertex
        .copy()
        .sub(rotOrigin)
        .rotate(angleRad)
        .add(rotOrigin);
}
function collideLineLine(x1, y1, x2, y2, x3, y3, x4, y4) {
    var uA = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) /
        ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));
    var uB = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) /
        ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));
    if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {
        var intersectionX = x1 + uA * (x2 - x1);
        var intersectionY = y1 + uA * (y2 - y1);
        return createVector(intersectionX, intersectionY);
    }
    return null;
}
function minBy(list, fn) {
    if (list.length < 0) {
        return null;
    }
    var recordItem = list[0];
    var recordWeight = fn(list[0]);
    for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
        var item = list_1[_i];
        var weight = fn(item);
        if (weight > recordWeight) {
            recordWeight = weight;
            recordItem = item;
        }
    }
    return recordItem;
}
function distributeUpTo(total, max, fn) {
    repeat(total, function (ix) {
        var val = (ix * max) / total;
        fn(val);
    });
}
var Wall = (function () {
    function Wall(a, b) {
        this.a = a.copy();
        this.b = b.copy();
        this.myColor = color(243, 134, 48);
    }
    Wall.prototype.draw = function () {
        stroke(this.myColor);
        strokeWeight(4);
        line(this.a.x, this.a.y, this.b.x, this.b.y);
        noStroke();
        fill(this.myColor);
        [this.a, this.b].forEach(function (pt) {
            circle(pt.x, pt.y, 5);
        });
    };
    Wall.prototype.midPoint = function () {
        return this.a.copy().lerp(this.b, 0.5);
    };
    Wall.prototype.length = function () {
        return dist(this.a.x, this.a.y, this.b.x, this.b.y);
    };
    Wall.prototype.translate = function (offset) {
        for (var _i = 0, _a = [this.a, this.b]; _i < _a.length; _i++) {
            var pt = _a[_i];
            pt.x += offset.x;
            pt.y += offset.y;
        }
    };
    Wall.createRandom = function () {
        var p1 = randomScreenPosition();
        var p2 = p1.copy().add(p5.Vector.random2D().mult(random(40, 400)));
        return new Wall(p1, p2);
    };
    return Wall;
}());
p5.disableFriendlyErrors = true;
var isDebugging = false;
var gAgents = [];
var gPlayerRays = [];
var gPlayer = null;
var gNumWalls = 20;
var gNumAgents = 100;
var gNumPlayerRays = 100;
var gNumStructures = 30;
var gStructures = [];
function setup() {
    createCanvas(windowWidth, windowHeight);
    repeat(gNumStructures, function () {
        var structure = Structure.createRandom();
        gStructures.push(structure);
    });
    repeat(gNumAgents, function () {
        gAgents.push(Agent.createRandom());
    });
    gPlayerRays = createRaysAtPosition(gNumPlayerRays, mousePosAsVector());
    gPlayer = Particle.createRandom();
    mouseX = centerPos().x;
    mouseY = centerPos().y;
}
function getAllWalls() {
    return gStructures.flatMap(function (structure) { return structure.walls; });
}
function createRaysAtPosition(numRays, pos) {
    var rays = [];
    distributeUpTo(numRays, TWO_PI, function (val) {
        return rays.push(new Ray(pos, { angleRads: val, walls: getAllWalls() }));
    });
    return rays;
}
function mousePosAsVector() {
    return createVector(mouseX, mouseY);
}
function update() {
    gPlayer.setPosition(mousePosAsVector());
    gPlayer.update();
    for (var _i = 0, gStructures_1 = gStructures; _i < gStructures_1.length; _i++) {
        var s = gStructures_1[_i];
        s.update();
    }
    for (var _a = 0, gAgents_1 = gAgents; _a < gAgents_1.length; _a++) {
        var agent = gAgents_1[_a];
        agent.updateWithRoaming(getAllWalls(), mousePosAsVector());
    }
    gPlayerRays = createRaysAtPosition(gNumPlayerRays, mousePosAsVector());
}
function draw() {
    update();
    background(0);
    fill("black");
    noStroke();
    for (var _i = 0, gStructures_2 = gStructures; _i < gStructures_2.length; _i++) {
        var s = gStructures_2[_i];
        s.draw();
    }
    for (var _a = 0, _b = getAllWalls(); _a < _b.length; _a++) {
        var wall = _b[_a];
        wall.draw();
    }
    for (var _c = 0, gAgents_2 = gAgents; _c < gAgents_2.length; _c++) {
        var agent = gAgents_2[_c];
        agent.draw();
    }
    for (var _d = 0, gPlayerRays_1 = gPlayerRays; _d < gPlayerRays_1.length; _d++) {
        var ray = gPlayerRays_1[_d];
        ray.drawRayUntilFirstIntersection();
    }
    gPlayer.draw();
}
//# sourceMappingURL=data:application/json;base64,